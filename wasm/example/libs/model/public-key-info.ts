// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class PublicKeyInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):PublicKeyInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPublicKeyInfo(bb:flatbuffers.ByteBuffer, obj?:PublicKeyInfo):PublicKeyInfo {
  return (obj || new PublicKeyInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPublicKeyInfo(bb:flatbuffers.ByteBuffer, obj?:PublicKeyInfo):PublicKeyInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PublicKeyInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

bitLen():flatbuffers.Long {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);
}

mutate_bitLen(value:flatbuffers.Long):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt64(this.bb_pos + offset, value);
  return true;
}

size():flatbuffers.Long {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);
}

mutate_size(value:flatbuffers.Long):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt64(this.bb_pos + offset, value);
  return true;
}

e():flatbuffers.Long {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);
}

mutate_e(value:flatbuffers.Long):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt64(this.bb_pos + offset, value);
  return true;
}

static startPublicKeyInfo(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addBitLen(builder:flatbuffers.Builder, bitLen:flatbuffers.Long) {
  builder.addFieldInt64(0, bitLen, builder.createLong(0, 0));
}

static addSize(builder:flatbuffers.Builder, size:flatbuffers.Long) {
  builder.addFieldInt64(1, size, builder.createLong(0, 0));
}

static addE(builder:flatbuffers.Builder, e:flatbuffers.Long) {
  builder.addFieldInt64(2, e, builder.createLong(0, 0));
}

static endPublicKeyInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPublicKeyInfo(builder:flatbuffers.Builder, bitLen:flatbuffers.Long, size:flatbuffers.Long, e:flatbuffers.Long):flatbuffers.Offset {
  PublicKeyInfo.startPublicKeyInfo(builder);
  PublicKeyInfo.addBitLen(builder, bitLen);
  PublicKeyInfo.addSize(builder, size);
  PublicKeyInfo.addE(builder, e);
  return PublicKeyInfo.endPublicKeyInfo(builder);
}
}
