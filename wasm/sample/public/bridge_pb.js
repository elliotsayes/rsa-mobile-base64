'use strict'; // code generated by pbf v3.2.1

var SaltLength = self.SaltLength = {
    "SALTLENGTH_UNSPECIFIED": {
        "value": 0,
        "options": {}
    },
    "SALTLENGTH_AUTO": {
        "value": 1,
        "options": {}
    },
    "SALTLENGTH_EQUALS_HASH": {
        "value": 2,
        "options": {}
    }
};

var PEMCipher = self.PEMCipher = {
    "PEMCIPHER_UNSPECIFIED": {
        "value": 0,
        "options": {}
    },
    "PEMCIPHER_DES": {
        "value": 1,
        "options": {}
    },
    "PEMCIPHER_3DES": {
        "value": 2,
        "options": {}
    },
    "PEMCIPHER_AES128": {
        "value": 3,
        "options": {}
    },
    "PEMCIPHER_AES192": {
        "value": 4,
        "options": {}
    },
    "PEMCIPHER_AES256": {
        "value": 5,
        "options": {}
    }
};

var Hash = self.Hash = {
    "HASH_UNSPECIFIED": {
        "value": 0,
        "options": {}
    },
    "HASH_MD5": {
        "value": 1,
        "options": {}
    },
    "HASH_SHA1": {
        "value": 2,
        "options": {}
    },
    "HASH_SHA224": {
        "value": 3,
        "options": {}
    },
    "HASH_SHA256": {
        "value": 4,
        "options": {}
    },
    "HASH_SHA384": {
        "value": 5,
        "options": {}
    },
    "HASH_SHA512": {
        "value": 6,
        "options": {}
    }
};

// ConvertJWTRequest ========================================

var ConvertJWTRequest = self.ConvertJWTRequest = {};

ConvertJWTRequest.read = function (pbf, end) {
    return pbf.readFields(ConvertJWTRequest._readField, {data: "", keyId: ""}, end);
};
ConvertJWTRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.data = pbf.readString();
    else if (tag === 3) obj.keyId = pbf.readString();
};
ConvertJWTRequest.write = function (obj, pbf) {
    if (obj.data) pbf.writeStringField(1, obj.data);
    if (obj.keyId) pbf.writeStringField(3, obj.keyId);
};

// ConvertKeyPairRequest ========================================

var ConvertKeyPairRequest = self.ConvertKeyPairRequest = {};

ConvertKeyPairRequest.read = function (pbf, end) {
    return pbf.readFields(ConvertKeyPairRequest._readField, {privateKey: "", certificate: "", password: ""}, end);
};
ConvertKeyPairRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.privateKey = pbf.readString();
    else if (tag === 3) obj.certificate = pbf.readString();
    else if (tag === 5) obj.password = pbf.readString();
};
ConvertKeyPairRequest.write = function (obj, pbf) {
    if (obj.privateKey) pbf.writeStringField(1, obj.privateKey);
    if (obj.certificate) pbf.writeStringField(3, obj.certificate);
    if (obj.password) pbf.writeStringField(5, obj.password);
};

// ConvertPKCS12Request ========================================

var ConvertPKCS12Request = self.ConvertPKCS12Request = {};

ConvertPKCS12Request.read = function (pbf, end) {
    return pbf.readFields(ConvertPKCS12Request._readField, {pkcs12: "", password: ""}, end);
};
ConvertPKCS12Request._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.pkcs12 = pbf.readString();
    else if (tag === 3) obj.password = pbf.readString();
};
ConvertPKCS12Request.write = function (obj, pbf) {
    if (obj.pkcs12) pbf.writeStringField(1, obj.pkcs12);
    if (obj.password) pbf.writeStringField(3, obj.password);
};

// ConvertPrivateKeyRequest ========================================

var ConvertPrivateKeyRequest = self.ConvertPrivateKeyRequest = {};

ConvertPrivateKeyRequest.read = function (pbf, end) {
    return pbf.readFields(ConvertPrivateKeyRequest._readField, {privateKey: ""}, end);
};
ConvertPrivateKeyRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.privateKey = pbf.readString();
};
ConvertPrivateKeyRequest.write = function (obj, pbf) {
    if (obj.privateKey) pbf.writeStringField(1, obj.privateKey);
};

// ConvertPublicKeyRequest ========================================

var ConvertPublicKeyRequest = self.ConvertPublicKeyRequest = {};

ConvertPublicKeyRequest.read = function (pbf, end) {
    return pbf.readFields(ConvertPublicKeyRequest._readField, {publicKey: ""}, end);
};
ConvertPublicKeyRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.publicKey = pbf.readString();
};
ConvertPublicKeyRequest.write = function (obj, pbf) {
    if (obj.publicKey) pbf.writeStringField(1, obj.publicKey);
};

// DecryptOAEPRequest ========================================

var DecryptOAEPRequest = self.DecryptOAEPRequest = {};

DecryptOAEPRequest.read = function (pbf, end) {
    return pbf.readFields(DecryptOAEPRequest._readField, {ciphertext: "", label: "", hash: 0, privateKey: ""}, end);
};
DecryptOAEPRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.ciphertext = pbf.readString();
    else if (tag === 3) obj.label = pbf.readString();
    else if (tag === 5) obj.hash = pbf.readVarint();
    else if (tag === 7) obj.privateKey = pbf.readString();
};
DecryptOAEPRequest.write = function (obj, pbf) {
    if (obj.ciphertext) pbf.writeStringField(1, obj.ciphertext);
    if (obj.label) pbf.writeStringField(3, obj.label);
    if (obj.hash) pbf.writeVarintField(5, obj.hash);
    if (obj.privateKey) pbf.writeStringField(7, obj.privateKey);
};

// DecryptOAEPBytesRequest ========================================

var DecryptOAEPBytesRequest = self.DecryptOAEPBytesRequest = {};

DecryptOAEPBytesRequest.read = function (pbf, end) {
    return pbf.readFields(DecryptOAEPBytesRequest._readField, {ciphertext: null, label: "", hash: 0, privateKey: ""}, end);
};
DecryptOAEPBytesRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.ciphertext = pbf.readBytes();
    else if (tag === 3) obj.label = pbf.readString();
    else if (tag === 5) obj.hash = pbf.readVarint();
    else if (tag === 7) obj.privateKey = pbf.readString();
};
DecryptOAEPBytesRequest.write = function (obj, pbf) {
    if (obj.ciphertext) pbf.writeBytesField(1, obj.ciphertext);
    if (obj.label) pbf.writeStringField(3, obj.label);
    if (obj.hash) pbf.writeVarintField(5, obj.hash);
    if (obj.privateKey) pbf.writeStringField(7, obj.privateKey);
};

// DecryptPKCS1v15Request ========================================

var DecryptPKCS1v15Request = self.DecryptPKCS1v15Request = {};

DecryptPKCS1v15Request.read = function (pbf, end) {
    return pbf.readFields(DecryptPKCS1v15Request._readField, {ciphertext: "", privateKey: ""}, end);
};
DecryptPKCS1v15Request._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.ciphertext = pbf.readString();
    else if (tag === 3) obj.privateKey = pbf.readString();
};
DecryptPKCS1v15Request.write = function (obj, pbf) {
    if (obj.ciphertext) pbf.writeStringField(1, obj.ciphertext);
    if (obj.privateKey) pbf.writeStringField(3, obj.privateKey);
};

// DecryptPKCS1v15BytesRequest ========================================

var DecryptPKCS1v15BytesRequest = self.DecryptPKCS1v15BytesRequest = {};

DecryptPKCS1v15BytesRequest.read = function (pbf, end) {
    return pbf.readFields(DecryptPKCS1v15BytesRequest._readField, {ciphertext: null, privateKey: ""}, end);
};
DecryptPKCS1v15BytesRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.ciphertext = pbf.readBytes();
    else if (tag === 3) obj.privateKey = pbf.readString();
};
DecryptPKCS1v15BytesRequest.write = function (obj, pbf) {
    if (obj.ciphertext) pbf.writeBytesField(1, obj.ciphertext);
    if (obj.privateKey) pbf.writeStringField(3, obj.privateKey);
};

// DecryptPrivateKeyRequest ========================================

var DecryptPrivateKeyRequest = self.DecryptPrivateKeyRequest = {};

DecryptPrivateKeyRequest.read = function (pbf, end) {
    return pbf.readFields(DecryptPrivateKeyRequest._readField, {privateKeyEncrypted: "", password: ""}, end);
};
DecryptPrivateKeyRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.privateKeyEncrypted = pbf.readString();
    else if (tag === 3) obj.password = pbf.readString();
};
DecryptPrivateKeyRequest.write = function (obj, pbf) {
    if (obj.privateKeyEncrypted) pbf.writeStringField(1, obj.privateKeyEncrypted);
    if (obj.password) pbf.writeStringField(3, obj.password);
};

// EncryptOAEPRequest ========================================

var EncryptOAEPRequest = self.EncryptOAEPRequest = {};

EncryptOAEPRequest.read = function (pbf, end) {
    return pbf.readFields(EncryptOAEPRequest._readField, {message: "", label: "", hash: 0, publicKey: ""}, end);
};
EncryptOAEPRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.message = pbf.readString();
    else if (tag === 3) obj.label = pbf.readString();
    else if (tag === 5) obj.hash = pbf.readVarint();
    else if (tag === 7) obj.publicKey = pbf.readString();
};
EncryptOAEPRequest.write = function (obj, pbf) {
    if (obj.message) pbf.writeStringField(1, obj.message);
    if (obj.label) pbf.writeStringField(3, obj.label);
    if (obj.hash) pbf.writeVarintField(5, obj.hash);
    if (obj.publicKey) pbf.writeStringField(7, obj.publicKey);
};

// EncryptOAEPBytesRequest ========================================

var EncryptOAEPBytesRequest = self.EncryptOAEPBytesRequest = {};

EncryptOAEPBytesRequest.read = function (pbf, end) {
    return pbf.readFields(EncryptOAEPBytesRequest._readField, {message: null, label: "", hash: 0, publicKey: ""}, end);
};
EncryptOAEPBytesRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.message = pbf.readBytes();
    else if (tag === 3) obj.label = pbf.readString();
    else if (tag === 5) obj.hash = pbf.readVarint();
    else if (tag === 7) obj.publicKey = pbf.readString();
};
EncryptOAEPBytesRequest.write = function (obj, pbf) {
    if (obj.message) pbf.writeBytesField(1, obj.message);
    if (obj.label) pbf.writeStringField(3, obj.label);
    if (obj.hash) pbf.writeVarintField(5, obj.hash);
    if (obj.publicKey) pbf.writeStringField(7, obj.publicKey);
};

// EncryptPKCS1v15Request ========================================

var EncryptPKCS1v15Request = self.EncryptPKCS1v15Request = {};

EncryptPKCS1v15Request.read = function (pbf, end) {
    return pbf.readFields(EncryptPKCS1v15Request._readField, {message: "", publicKey: ""}, end);
};
EncryptPKCS1v15Request._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.message = pbf.readString();
    else if (tag === 3) obj.publicKey = pbf.readString();
};
EncryptPKCS1v15Request.write = function (obj, pbf) {
    if (obj.message) pbf.writeStringField(1, obj.message);
    if (obj.publicKey) pbf.writeStringField(3, obj.publicKey);
};

// EncryptPKCS1v15BytesRequest ========================================

var EncryptPKCS1v15BytesRequest = self.EncryptPKCS1v15BytesRequest = {};

EncryptPKCS1v15BytesRequest.read = function (pbf, end) {
    return pbf.readFields(EncryptPKCS1v15BytesRequest._readField, {message: null, publicKey: ""}, end);
};
EncryptPKCS1v15BytesRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.message = pbf.readBytes();
    else if (tag === 3) obj.publicKey = pbf.readString();
};
EncryptPKCS1v15BytesRequest.write = function (obj, pbf) {
    if (obj.message) pbf.writeBytesField(1, obj.message);
    if (obj.publicKey) pbf.writeStringField(3, obj.publicKey);
};

// EncryptPrivateKeyRequest ========================================

var EncryptPrivateKeyRequest = self.EncryptPrivateKeyRequest = {};

EncryptPrivateKeyRequest.read = function (pbf, end) {
    return pbf.readFields(EncryptPrivateKeyRequest._readField, {privateKey: "", password: "", cipher: 0}, end);
};
EncryptPrivateKeyRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.privateKey = pbf.readString();
    else if (tag === 3) obj.password = pbf.readString();
    else if (tag === 5) obj.cipher = pbf.readVarint();
};
EncryptPrivateKeyRequest.write = function (obj, pbf) {
    if (obj.privateKey) pbf.writeStringField(1, obj.privateKey);
    if (obj.password) pbf.writeStringField(3, obj.password);
    if (obj.cipher) pbf.writeVarintField(5, obj.cipher);
};

// GenerateRequest ========================================

var GenerateRequest = self.GenerateRequest = {};

GenerateRequest.read = function (pbf, end) {
    return pbf.readFields(GenerateRequest._readField, {nBits: 0}, end);
};
GenerateRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.nBits = pbf.readVarint(true);
};
GenerateRequest.write = function (obj, pbf) {
    if (obj.nBits) pbf.writeVarintField(1, obj.nBits);
};

// HashRequest ========================================

var HashRequest = self.HashRequest = {};

HashRequest.read = function (pbf, end) {
    return pbf.readFields(HashRequest._readField, {message: "", hash: 0}, end);
};
HashRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.message = pbf.readString();
    else if (tag === 3) obj.hash = pbf.readVarint();
};
HashRequest.write = function (obj, pbf) {
    if (obj.message) pbf.writeStringField(1, obj.message);
    if (obj.hash) pbf.writeVarintField(3, obj.hash);
};

// Base64Request ========================================

var Base64Request = self.Base64Request = {};

Base64Request.read = function (pbf, end) {
    return pbf.readFields(Base64Request._readField, {message: ""}, end);
};
Base64Request._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.message = pbf.readString();
};
Base64Request.write = function (obj, pbf) {
    if (obj.message) pbf.writeStringField(1, obj.message);
};

// MetadataPrivateKeyRequest ========================================

var MetadataPrivateKeyRequest = self.MetadataPrivateKeyRequest = {};

MetadataPrivateKeyRequest.read = function (pbf, end) {
    return pbf.readFields(MetadataPrivateKeyRequest._readField, {privateKey: ""}, end);
};
MetadataPrivateKeyRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.privateKey = pbf.readString();
};
MetadataPrivateKeyRequest.write = function (obj, pbf) {
    if (obj.privateKey) pbf.writeStringField(1, obj.privateKey);
};

// MetadataPublicKeyRequest ========================================

var MetadataPublicKeyRequest = self.MetadataPublicKeyRequest = {};

MetadataPublicKeyRequest.read = function (pbf, end) {
    return pbf.readFields(MetadataPublicKeyRequest._readField, {publicKey: ""}, end);
};
MetadataPublicKeyRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.publicKey = pbf.readString();
};
MetadataPublicKeyRequest.write = function (obj, pbf) {
    if (obj.publicKey) pbf.writeStringField(1, obj.publicKey);
};

// SignPKCS1v15Request ========================================

var SignPKCS1v15Request = self.SignPKCS1v15Request = {};

SignPKCS1v15Request.read = function (pbf, end) {
    return pbf.readFields(SignPKCS1v15Request._readField, {message: "", hash: 0, privateKey: ""}, end);
};
SignPKCS1v15Request._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.message = pbf.readString();
    else if (tag === 3) obj.hash = pbf.readVarint();
    else if (tag === 5) obj.privateKey = pbf.readString();
};
SignPKCS1v15Request.write = function (obj, pbf) {
    if (obj.message) pbf.writeStringField(1, obj.message);
    if (obj.hash) pbf.writeVarintField(3, obj.hash);
    if (obj.privateKey) pbf.writeStringField(5, obj.privateKey);
};

// SignPKCS1v15BytesRequest ========================================

var SignPKCS1v15BytesRequest = self.SignPKCS1v15BytesRequest = {};

SignPKCS1v15BytesRequest.read = function (pbf, end) {
    return pbf.readFields(SignPKCS1v15BytesRequest._readField, {message: null, hash: 0, privateKey: ""}, end);
};
SignPKCS1v15BytesRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.message = pbf.readBytes();
    else if (tag === 3) obj.hash = pbf.readVarint();
    else if (tag === 5) obj.privateKey = pbf.readString();
};
SignPKCS1v15BytesRequest.write = function (obj, pbf) {
    if (obj.message) pbf.writeBytesField(1, obj.message);
    if (obj.hash) pbf.writeVarintField(3, obj.hash);
    if (obj.privateKey) pbf.writeStringField(5, obj.privateKey);
};

// SignPSSRequest ========================================

var SignPSSRequest = self.SignPSSRequest = {};

SignPSSRequest.read = function (pbf, end) {
    return pbf.readFields(SignPSSRequest._readField, {message: "", hash: 0, saltLength: 0, privateKey: ""}, end);
};
SignPSSRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.message = pbf.readString();
    else if (tag === 3) obj.hash = pbf.readVarint();
    else if (tag === 5) obj.saltLength = pbf.readVarint();
    else if (tag === 7) obj.privateKey = pbf.readString();
};
SignPSSRequest.write = function (obj, pbf) {
    if (obj.message) pbf.writeStringField(1, obj.message);
    if (obj.hash) pbf.writeVarintField(3, obj.hash);
    if (obj.saltLength) pbf.writeVarintField(5, obj.saltLength);
    if (obj.privateKey) pbf.writeStringField(7, obj.privateKey);
};

// SignPSSBytesRequest ========================================

var SignPSSBytesRequest = self.SignPSSBytesRequest = {};

SignPSSBytesRequest.read = function (pbf, end) {
    return pbf.readFields(SignPSSBytesRequest._readField, {message: null, hash: 0, saltLength: 0, privateKey: ""}, end);
};
SignPSSBytesRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.message = pbf.readBytes();
    else if (tag === 3) obj.hash = pbf.readVarint();
    else if (tag === 5) obj.saltLength = pbf.readVarint();
    else if (tag === 7) obj.privateKey = pbf.readString();
};
SignPSSBytesRequest.write = function (obj, pbf) {
    if (obj.message) pbf.writeBytesField(1, obj.message);
    if (obj.hash) pbf.writeVarintField(3, obj.hash);
    if (obj.saltLength) pbf.writeVarintField(5, obj.saltLength);
    if (obj.privateKey) pbf.writeStringField(7, obj.privateKey);
};

// VerifyPKCS1v15Request ========================================

var VerifyPKCS1v15Request = self.VerifyPKCS1v15Request = {};

VerifyPKCS1v15Request.read = function (pbf, end) {
    return pbf.readFields(VerifyPKCS1v15Request._readField, {signature: "", message: "", hash: 0, publicKey: ""}, end);
};
VerifyPKCS1v15Request._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.signature = pbf.readString();
    else if (tag === 3) obj.message = pbf.readString();
    else if (tag === 5) obj.hash = pbf.readVarint();
    else if (tag === 7) obj.publicKey = pbf.readString();
};
VerifyPKCS1v15Request.write = function (obj, pbf) {
    if (obj.signature) pbf.writeStringField(1, obj.signature);
    if (obj.message) pbf.writeStringField(3, obj.message);
    if (obj.hash) pbf.writeVarintField(5, obj.hash);
    if (obj.publicKey) pbf.writeStringField(7, obj.publicKey);
};

// VerifyPKCS1v15BytesRequest ========================================

var VerifyPKCS1v15BytesRequest = self.VerifyPKCS1v15BytesRequest = {};

VerifyPKCS1v15BytesRequest.read = function (pbf, end) {
    return pbf.readFields(VerifyPKCS1v15BytesRequest._readField, {signature: null, message: null, hash: 0, publicKey: ""}, end);
};
VerifyPKCS1v15BytesRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.signature = pbf.readBytes();
    else if (tag === 3) obj.message = pbf.readBytes();
    else if (tag === 5) obj.hash = pbf.readVarint();
    else if (tag === 7) obj.publicKey = pbf.readString();
};
VerifyPKCS1v15BytesRequest.write = function (obj, pbf) {
    if (obj.signature) pbf.writeBytesField(1, obj.signature);
    if (obj.message) pbf.writeBytesField(3, obj.message);
    if (obj.hash) pbf.writeVarintField(5, obj.hash);
    if (obj.publicKey) pbf.writeStringField(7, obj.publicKey);
};

// VerifyPSSRequest ========================================

var VerifyPSSRequest = self.VerifyPSSRequest = {};

VerifyPSSRequest.read = function (pbf, end) {
    return pbf.readFields(VerifyPSSRequest._readField, {signature: "", message: "", hash: 0, saltLength: 0, publicKey: ""}, end);
};
VerifyPSSRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.signature = pbf.readString();
    else if (tag === 3) obj.message = pbf.readString();
    else if (tag === 5) obj.hash = pbf.readVarint();
    else if (tag === 7) obj.saltLength = pbf.readVarint();
    else if (tag === 9) obj.publicKey = pbf.readString();
};
VerifyPSSRequest.write = function (obj, pbf) {
    if (obj.signature) pbf.writeStringField(1, obj.signature);
    if (obj.message) pbf.writeStringField(3, obj.message);
    if (obj.hash) pbf.writeVarintField(5, obj.hash);
    if (obj.saltLength) pbf.writeVarintField(7, obj.saltLength);
    if (obj.publicKey) pbf.writeStringField(9, obj.publicKey);
};

// VerifyPSSBytesRequest ========================================

var VerifyPSSBytesRequest = self.VerifyPSSBytesRequest = {};

VerifyPSSBytesRequest.read = function (pbf, end) {
    return pbf.readFields(VerifyPSSBytesRequest._readField, {signature: null, message: null, hash: 0, saltLength: 0, publicKey: ""}, end);
};
VerifyPSSBytesRequest._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.signature = pbf.readBytes();
    else if (tag === 3) obj.message = pbf.readBytes();
    else if (tag === 5) obj.hash = pbf.readVarint();
    else if (tag === 7) obj.saltLength = pbf.readVarint();
    else if (tag === 9) obj.publicKey = pbf.readString();
};
VerifyPSSBytesRequest.write = function (obj, pbf) {
    if (obj.signature) pbf.writeBytesField(1, obj.signature);
    if (obj.message) pbf.writeBytesField(3, obj.message);
    if (obj.hash) pbf.writeVarintField(5, obj.hash);
    if (obj.saltLength) pbf.writeVarintField(7, obj.saltLength);
    if (obj.publicKey) pbf.writeStringField(9, obj.publicKey);
};

// StringResponse ========================================

var StringResponse = self.StringResponse = {};

StringResponse.read = function (pbf, end) {
    return pbf.readFields(StringResponse._readField, {output: "", error: ""}, end);
};
StringResponse._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.output = pbf.readString();
    else if (tag === 3) obj.error = pbf.readString();
};
StringResponse.write = function (obj, pbf) {
    if (obj.output) pbf.writeStringField(1, obj.output);
    if (obj.error) pbf.writeStringField(3, obj.error);
};

// BytesResponse ========================================

var BytesResponse = self.BytesResponse = {};

BytesResponse.read = function (pbf, end) {
    return pbf.readFields(BytesResponse._readField, {output: null, error: ""}, end);
};
BytesResponse._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.output = pbf.readBytes();
    else if (tag === 3) obj.error = pbf.readString();
};
BytesResponse.write = function (obj, pbf) {
    if (obj.output) pbf.writeBytesField(1, obj.output);
    if (obj.error) pbf.writeStringField(3, obj.error);
};

// BoolResponse ========================================

var BoolResponse = self.BoolResponse = {};

BoolResponse.read = function (pbf, end) {
    return pbf.readFields(BoolResponse._readField, {output: false, error: ""}, end);
};
BoolResponse._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.output = pbf.readBoolean();
    else if (tag === 3) obj.error = pbf.readString();
};
BoolResponse.write = function (obj, pbf) {
    if (obj.output) pbf.writeBooleanField(1, obj.output);
    if (obj.error) pbf.writeStringField(3, obj.error);
};

// PKCS12KeyPairResponse ========================================

var PKCS12KeyPairResponse = self.PKCS12KeyPairResponse = {};

PKCS12KeyPairResponse.read = function (pbf, end) {
    return pbf.readFields(PKCS12KeyPairResponse._readField, {output: null, error: ""}, end);
};
PKCS12KeyPairResponse._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.output = PKCS12KeyPair.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.error = pbf.readString();
};
PKCS12KeyPairResponse.write = function (obj, pbf) {
    if (obj.output) pbf.writeMessage(1, PKCS12KeyPair.write, obj.output);
    if (obj.error) pbf.writeStringField(3, obj.error);
};

// PKCS12KeyPair ========================================

var PKCS12KeyPair = self.PKCS12KeyPair = {};

PKCS12KeyPair.read = function (pbf, end) {
    return pbf.readFields(PKCS12KeyPair._readField, {privateKey: "", publicKey: "", certificate: ""}, end);
};
PKCS12KeyPair._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.privateKey = pbf.readString();
    else if (tag === 2) obj.publicKey = pbf.readString();
    else if (tag === 3) obj.certificate = pbf.readString();
};
PKCS12KeyPair.write = function (obj, pbf) {
    if (obj.privateKey) pbf.writeStringField(1, obj.privateKey);
    if (obj.publicKey) pbf.writeStringField(2, obj.publicKey);
    if (obj.certificate) pbf.writeStringField(3, obj.certificate);
};

// KeyPairResponse ========================================

var KeyPairResponse = self.KeyPairResponse = {};

KeyPairResponse.read = function (pbf, end) {
    return pbf.readFields(KeyPairResponse._readField, {output: null, error: ""}, end);
};
KeyPairResponse._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.output = KeyPair.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.error = pbf.readString();
};
KeyPairResponse.write = function (obj, pbf) {
    if (obj.output) pbf.writeMessage(1, KeyPair.write, obj.output);
    if (obj.error) pbf.writeStringField(3, obj.error);
};

// KeyPair ========================================

var KeyPair = self.KeyPair = {};

KeyPair.read = function (pbf, end) {
    return pbf.readFields(KeyPair._readField, {privateKey: "", publicKey: ""}, end);
};
KeyPair._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.privateKey = pbf.readString();
    else if (tag === 2) obj.publicKey = pbf.readString();
};
KeyPair.write = function (obj, pbf) {
    if (obj.privateKey) pbf.writeStringField(1, obj.privateKey);
    if (obj.publicKey) pbf.writeStringField(2, obj.publicKey);
};

// PrivateKeyInfoResponse ========================================

var PrivateKeyInfoResponse = self.PrivateKeyInfoResponse = {};

PrivateKeyInfoResponse.read = function (pbf, end) {
    return pbf.readFields(PrivateKeyInfoResponse._readField, {output: null, error: ""}, end);
};
PrivateKeyInfoResponse._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.output = PrivateKeyInfo.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.error = pbf.readString();
};
PrivateKeyInfoResponse.write = function (obj, pbf) {
    if (obj.output) pbf.writeMessage(1, PrivateKeyInfo.write, obj.output);
    if (obj.error) pbf.writeStringField(3, obj.error);
};

// PrivateKeyInfo ========================================

var PrivateKeyInfo = self.PrivateKeyInfo = {};

PrivateKeyInfo.read = function (pbf, end) {
    return pbf.readFields(PrivateKeyInfo._readField, {bitLen: 0, size: 0, error: ""}, end);
};
PrivateKeyInfo._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.bitLen = pbf.readVarint(true);
    else if (tag === 3) obj.size = pbf.readVarint(true);
    else if (tag === 5) obj.error = pbf.readString();
};
PrivateKeyInfo.write = function (obj, pbf) {
    if (obj.bitLen) pbf.writeVarintField(1, obj.bitLen);
    if (obj.size) pbf.writeVarintField(3, obj.size);
    if (obj.error) pbf.writeStringField(5, obj.error);
};

// PublicKeyInfoResponse ========================================

var PublicKeyInfoResponse = self.PublicKeyInfoResponse = {};

PublicKeyInfoResponse.read = function (pbf, end) {
    return pbf.readFields(PublicKeyInfoResponse._readField, {output: null, error: ""}, end);
};
PublicKeyInfoResponse._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.output = PublicKeyInfo.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.error = pbf.readString();
};
PublicKeyInfoResponse.write = function (obj, pbf) {
    if (obj.output) pbf.writeMessage(1, PublicKeyInfo.write, obj.output);
    if (obj.error) pbf.writeStringField(3, obj.error);
};

// PublicKeyInfo ========================================

var PublicKeyInfo = self.PublicKeyInfo = {};

PublicKeyInfo.read = function (pbf, end) {
    return pbf.readFields(PublicKeyInfo._readField, {bitLen: 0, size: 0, e: 0}, end);
};
PublicKeyInfo._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.bitLen = pbf.readVarint(true);
    else if (tag === 3) obj.size = pbf.readVarint(true);
    else if (tag === 5) obj.e = pbf.readVarint(true);
};
PublicKeyInfo.write = function (obj, pbf) {
    if (obj.bitLen) pbf.writeVarintField(1, obj.bitLen);
    if (obj.size) pbf.writeVarintField(3, obj.size);
    if (obj.e) pbf.writeVarintField(5, obj.e);
};
